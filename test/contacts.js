var utils = require('./utils.js');
var contacts = require('../simaya/models/contacts.js')(utils.app);
var cache = require('../simaya/models/cache.js')(utils.app);

testCases = {
  setUp: function(callback) {
    utils.db.open(function() {
      if(numberOfTestsRun == numberOfTests) {
        // Drop database in the first run 
        utils.db.dropDatabase(function(err, done) {
          callback();  
        });                
      } else {
        callback();        
      }    
    });
  },

  tearDown: function(callback) {
    numberOfTestsRun = numberOfTestsRun - 1;

    utils.db.close();
    callback();
  },

  "create": function(test) {
    var data = {
      connections: ['a','b'],
      established: false,
      message: "text",
      initiator: 'a',
      date: new Date()
    }  
        
    contacts.connect(data, function (v) {
      if (v.hasErrors()) {
        console.log(v.errors)
      }
      test.ok(!v.hasErrors(), "Contact creation is failed");
      test.done();
    });
  },

  "create with invalid connection": function(test) {
    var data = {
      connections: ['x','x'],
      established: false,
      message: "text",
      initiator: 'x',
      date: new Date()
    }  
        
    contacts.connect(data, function (v) {
      if (v.hasErrors()) {
        console.log(v.errors)
      }
      test.ok(v.hasErrors(), "Contact creation is failed");
      test.done();
    });
  },




  "create and establish": function(test) {
    var data = {
      connections: ['da','db'],
      established: false,
      message: "text",
      initiator: 'da',
      date: new Date()
    }  
        
    contacts.connect(data, function (v) {
      if (v.hasErrors()) {
        console.log(v.errors)
      }
      contacts.establish(data._id, function() {
        contacts.getInfo(data._id, function(item) {
          test.ok(item.established == true, "Contact and establishing creation is failed");
          test.done();
        })
      })
    });
 },


  "create with wrong initiator": function(test) {
    var data = {
      connections: ['a','b'],
      established: false,
      initiator: 'c',
      date: new Date()
    }  
        
    contacts.connect(data, function (v) {
      if (v.hasErrors()) {
        console.log(v.errors)
      }
      test.ok(v.hasErrors(), "Contact creation is failed");
      test.done();
    });
 },

  "create from one side and connect back from another": function(test) {
    var data = {
      connections: ['aa','ab'],
      established: false,
      initiator: 'aa',
      date: new Date()
    } 
        
    contacts.connect(data, function (v) {
      test.ok(!v.hasErrors(), "Contact creation is failed");
      delete(data._id);
      data.initiator = 'ab';
      contacts.connect(data, function (v) {
        test.ok(!v.hasErrors(), "Contact creation is failed");
        contacts.getInfo(v.resultId, function(i) {
          test.ok((i.established == true), "Contact creation is failed");
          test.done();
        })
      })
    });
 },

  // Connect from one side
  // then listByUser to get it into cache
  // then connect from the other one
  // the connection must be established and recached
  "create from one side and connect back from another and check cache": function(test) {
    // first connection attempt by daa
    var data = {
      connections: ['daa','dab'],
      established: false,
      initiator: 'daa',
      date: new Date()
    } 
        
    contacts.connect(data, function (v) {
      test.ok(!v.hasErrors(), "Contact creation is failed");
      delete(data._id);
      connections: ['dab','daa'],
      data.initiator = 'dab';
      // put in the cache by dab
      contacts.listByUser("dab", {}, function() {
        // second connection attempt by dab
        contacts.connect(data, function (v) {
          test.ok(!v.hasErrors(), "Contact creation is failed");
          // cache also updated by dab
          contacts.listByUser("dab", {search: { end1: "dab" }}, function(r) {
            test.ok((r[0].established == true), "Contact creation is failed");
            test.done();
          })
        })
      })
    });
 },

  // Connect from one side
  // then listByUser to get it into cache
  // then connect from the other one
  // the connection must be established and recached
  // this time cache is generated by first party 
  "create from one side and connect back from another and check cache part 2": function(test) {
    // first connection attempt by daa
    var data = {
      connections: ['adaa','adab'],
      established: false,
      initiator: 'adaa',
      date: new Date()
    } 
        
    contacts.connect(data, function (v) {
      test.ok(!v.hasErrors(), "Contact creation is failed");
      delete(data._id);
      connections: ['adab','adaa'],
      data.initiator = 'adab';
      // DIFFERENCE WITH FIRST PART
      // put in the cache by adaa 
      contacts.listByUser("adaa", {}, function() {
        // second connection attempt by dab
        contacts.connect(data, function (v) {
          test.ok(!v.hasErrors(), "Contact creation is failed");
          // cache also updated by dab
          contacts.listByUser("adab", {search: { end1: "adab" }}, function(r) {
            test.ok((r != null), "cache is not created for second party");
            test.ok((r.length > 0), "cache is not created for second party");
            test.ok((r.length > 0 && r[0].established == true), "cache does not contain correct information");
            test.done();
          })
        })
      })
    });
 },



  "create connection and fill cache": function(test) {
    var data = {
      connections: ['caa','cab'],
      established: false,
      initiator: 'caa',
      date: new Date()
    } 
        
    contacts.connect(data, function (v) {
      test.ok(!v.hasErrors(), "Contact creation is failed");
      contacts.listByUser("cab", {}, function(i) {
        cache.isValid("contacts:cab", function(id, time){
          test.ok((id != null) , "Cache is not ok"); 
          setTimeout(function() {
            contacts.listByUser("cab", {}, function(i) {
              cache.isValid("contacts:cab", function(id2, time2){
                test.ok((time + 1) == (time2 + 1), "Cache is recreated")
                test.done();
              })
            })
          }, 2000)
        })
      })
    });
  },

  "set notes": function(test) {
    var data = {
      connections: ['xcaa','xcab'],
      established: false,
      initiator: 'xcaa',
      date: new Date()
    } 
 
    contacts.connect(data, function(v) {
      test.ok(!v.hasErrors(), "Contact creation is failed");
      contacts.establish(data._id, function() {
        contacts.setNotes("xcab", "xcaa", "this is notes", function(s) {
          test.ok(s == true, "Notes failed to set");
          contacts.getNotes("xcab", "xcaa", function(n) {
            test.ok(n == "this is notes", "Notes is not the same");
            test.done();
          });
        });
      });
    });
  },

  "set notes two sides": function(test) {
    var data = {
      connections: ['bcaa','bcab'],
      established: false,
      initiator: 'bcaa',
      date: new Date()
    } 
 
    contacts.connect(data, function(v) {
      test.ok(!v.hasErrors(), "Contact creation is failed");
      contacts.establish(data._id, function() {
        contacts.setNotes("xcab", "xcaa", "this is notes", function(s) {
          test.ok(s == true, "Notes failed to set");
          contacts.setNotes("xcaa", "xcab", "this is notes", function(s) {
            test.ok(s == true, "Notes failed to set");
            test.done();
          });
        });
      });
    });
  },

  "set notes on unestablished connection": function(test) {
    var data = {
      connections: ['dcaa','dcab'],
      established: false,
      initiator: 'dcaa',
      date: new Date()
    } 
 
    contacts.connect(data, function(v) {
      test.ok(!v.hasErrors(), "Contact creation is failed");
      contacts.setNotes("dcab", "dcaa", "this is notes", function(s) {
        test.ok(s == false, "Notes failed to set");
        test.done();
      });
    });
  },


}

var numberOfTests = Object.keys(testCases).length;
var numberOfTestsRun = numberOfTests; 
module.exports = testCases;
